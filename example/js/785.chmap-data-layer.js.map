{"version":3,"file":"785.chmap-data-layer.js","mappings":"sRAEMA,EAAoB,I,QAAIC,QAAAA,mBAE9B,SAASC,EAAiBC,EAAKC,EAAOC,EAAIC,GACtCN,EAAkBO,GAAGJ,EAAKC,EAAOC,EAAIC,GAGzC,SAASE,EAAkBC,GAGvB,IAAMC,EAAQD,EAAUE,MAAM,GAE9B,QAAcC,IAAVF,EAAqB,CAErB,IAAMG,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,kBAAMf,EAAkBgB,KAAK,eAAgB,CAAEC,KAAMJ,EAAOK,OAAQC,KAAM,aAE1F,IAAMC,EAAgBV,EAAMW,KAAKC,MAAM,KAAK,GAAGC,cAExB,QAAlBH,GAA6C,SAAlBA,EAC5BP,EAAOW,WAAWd,EAAO,SAGzBV,EAAkBgB,KAAK,YAAa,+CAGxCP,EAAUgB,MAAQ,IAK1B,SAASC,EAAmBC,EAAKC,EAAUC,GAEvC,GAAkB,KAAf,IAAAF,GAAG,KAAHA,GAAH,CAEA,IAAMG,EAAY,CAAEC,OAAQ,OAEzBF,IACCC,EAAUE,YAAc,WAG5BC,MAAMN,EAAKG,GACNI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,GAAKD,EAAW,WAAe,CAACE,IAAKF,EAASG,YACxEJ,MAAK,SAAAC,GAAQ,OAAIA,EAASlB,UAC1BiB,MAAK,SAAAjB,GAAI,OAAIjB,EAAkBgB,KAAK,eAAgB,CAAEC,KAAAA,EAAME,KAAMS,OAClEW,OAAM,SAAAC,GACHxC,EAAkBgB,KAAK,YAAawB","sources":["webpack://chmapDataLayer/./src/js/file-import/file-loader.js"],"sourcesContent":["import { Commons } from '@chmap/utilities';\n\nconst localEventEmitter = new Commons.EventEmitterClass();\n\nfunction addEventListener(obj, types, fn, context){\n    localEventEmitter.on(obj, types, fn, context);\n}\n\nfunction loadLocalDataFile(fileInput){\n\n    //only process one file.\n    const aFile = fileInput.files[0];\n\n    if (aFile !== undefined) {\n\n        const reader = new FileReader();\n\n        reader.onload = () => localEventEmitter.emit('dataFileRead', { text: reader.result, type: 'unknown'});\n\n        const extensionName = aFile.name.split(\".\")[1].toLowerCase();\n\n        if ( extensionName === \"csv\" || extensionName === \"json\") {\n            reader.readAsText(aFile, \"UTF-8\");\n        } else {\n            //TODO: i18n\n            localEventEmitter.emit('exception', \"Only CSV or GeoJson file format is allowed!\");\n        }\n\n        fileInput.value = '';\n    }\n\n}\n\nfunction loadOnlineDataFile(url, fileType, requireCredentials){\n\n    if(url.trim() === '') return;\n\n    const fetchOpts = { method: 'GET' };\n\n    if(requireCredentials){\n        fetchOpts.credentials = 'include';\n    }\n\n    fetch(url, fetchOpts)\n        .then(response => response.ok ? response : Promise.reject({err: response.status}))\n        .then(response => response.text())\n        .then(text => localEventEmitter.emit('dataFileRead', { text, type: fileType }))\n        .catch(error => {\n            localEventEmitter.emit('exception', error);\n        });\n\n}\n\nexport {\n    loadLocalDataFile,\n    loadOnlineDataFile,\n    addEventListener as on,\n}\n\n/* Events\n\n    { name: 'dataFileRead', params: { text, type }}\n    { name: 'exception', params: String }\n\n */\n"],"names":["localEventEmitter","Commons","addEventListener","obj","types","fn","context","on","loadLocalDataFile","fileInput","aFile","files","undefined","reader","FileReader","onload","emit","text","result","type","extensionName","name","split","toLowerCase","readAsText","value","loadOnlineDataFile","url","fileType","requireCredentials","fetchOpts","method","credentials","fetch","then","response","ok","err","status","catch","error"],"sourceRoot":""}