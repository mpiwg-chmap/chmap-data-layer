{"version":3,"file":"821.chmap-data-layer.js","mappings":"8xCAGA,IAAQA,EAAcC,EAAAA,cAAAA,UAEhBC,EAAoB,IAAIC,EAAAA,QAAAA,kBAE1BC,EAAQ,KAERC,EAAiB,KAEjBC,EAAY,KAEhB,SAASC,EAAiBC,EAAKC,EAAOC,EAAIC,GACtCT,EAAkBU,GAAGJ,EAAKC,EAAOC,EAAIC,GAqGzC,SAASE,EAAKC,GAlGd,IAEUC,EAkGFX,KAlGEW,EAAMC,SAASC,cAAc,QAmB/BC,UAjBM,mhBAmBVF,SAASG,KAAKC,OAAOL,GAMzB,SAA+BA,GAE3BV,EAAiBU,EAAIM,cAAc,oBAEnCf,EAAYS,EAAIM,cAAc,mBAE9B,IAAMC,EAAcP,EAAIQ,WAExBnB,EAAQ,IAAIJ,EAAUsB,GAMtBA,EAAaf,iBAAiB,uBAAuB,WACjDL,EAAkBsB,KAAK,SAAUF,MAnBrCG,CAAsBV,IAwB1B,YAA0D,MAArCW,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,aAEpCC,EAAO,CAACH,EAAU,QAElBI,EAAQ,GAJ0C,IAMpCH,GANoC,IAMtD,2BAAwB,WAEmB,gBAFhCI,EAAa,QAEfH,GAAgBE,IAAUC,EAAIC,KAEjB,KAAVF,GACAD,EAAKI,KAAK,SAGdJ,EAAKI,KAAL,0DACKF,EAAIG,KADT,cACkBH,EAAI,kBADtB,eAC6CA,EAAI,gBADjD,mBAC0EA,EAAII,QAD9E,aACyFJ,EAAIK,OAD7F,cACwGL,EAAIM,QAD5G,aACuHN,EAAIO,OAD3H,aACqIP,EAAIQ,OADzI,aACmJR,EAAIS,OADvJ,UAIAV,EAAQC,EAAIC,IAGhBH,EAAKI,KAAL,2CAA4BF,EAAIC,GAAhC,kBAA2CD,EAAIU,KAA/C,kBAA4DV,EAAIW,KAAhE,6GAAwKX,EAAIY,SAA5K,UArBkD,8BAwBtDvC,EAAea,UAAYQ,EAE3BpB,EAAUY,UAAYY,EAAKe,KAAK,IAMpC,WAEI,IAAMC,EAAUxC,EAAUyC,iBAAiB,kBAE3C,GAAGD,EAAQ,WAEUA,GAFV,yBAEGE,EAFH,QAIHA,EAAIC,QAAU,SAACC,GACXhD,EAAkBsB,KAAK,eAAgBwB,EAAIG,OAHnD,2BAAyB,IAFlB,gCARXC,GA2BAC,CAAWvC,GAEXV,EAAMS,OAENX,EAAkBsB,KAAK,QAASpB,EAAMkD","sources":["webpack://chmapDataLayer/./src/js/floating-panel/images-panel.js"],"sourcesContent":["\nimport { Commons, BootstrapWrap } from '@chmap/utilities';\n\nconst { Offcanvas } = BootstrapWrap;\n\nconst localEventEmitter = new Commons.EventEmitterClass();\n\nlet panel = null;\n\nlet offCanvasTitle = null;\n\nlet panelBody = null;\n\nfunction addEventListener(obj, types, fn, context){\n    localEventEmitter.on(obj, types, fn, context);\n}\n\nfunction createUI(){\n\n    const div = document.createElement('div');\n\n    const html =\n`<div \n     id=\"data-layer-images-panel\"\n     class=\"offcanvas offcanvas-start\"\n     style=\"width:40%;\"\n     data-bs-scroll=\"true\"\n     data-bs-backdrop=\"false\"\n     tabindex=\"-1\"\n     aria-labelledby=\"offcanvasScrollingLabel\">\n    <div class=\"offcanvas-header pb-0\">\n        <h5 class=\"offcanvas-title\"></h5>\n        <i class=\"bi bi-chevron-left btn-outline-success px-1\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\" ></i>\n    </div>\n    <div class=\"offcanvas-body\" style=\"padding-top:0.5rem;\">\n    </div>\n</div>`;\n\n    div.innerHTML = html;\n\n    document.body.append(div);\n\n    bindPointersAndEvents(div);\n\n}\n\nfunction bindPointersAndEvents(div) {\n\n    offCanvasTitle = div.querySelector('.offcanvas-title');\n\n    panelBody = div.querySelector('.offcanvas-body');\n\n    const offCanvasDom= div.firstChild;\n\n    panel = new Offcanvas(offCanvasDom);\n\n    // offCanvasDom.addEventListener('shown.bs.offcanvas', () => {\n    //     localEventEmitter.emit('shown', offCanvasDom);\n    // });\n\n    offCanvasDom.addEventListener('hidden.bs.offcanvas', () => {\n        localEventEmitter.emit('hidden', offCanvasDom);\n    });\n\n}\n\nfunction setContent({title, subTitle, rows, isSingleBook}){\n\n    let html = [subTitle, '<br>'];\n\n    let tmpID = '';\n\n    for (const row of rows) {\n\n        if (!isSingleBook && tmpID !== row.ID) {\n\n            if (tmpID !== \"\") {\n                html.push('<br/>');\n            }\n\n            html.push(\n              `${row.name} (${row[\"TimeSpan:begin\"]} ~ ${row[\"TimeSpan:end\"]}) <br> ${row.Dynasty} ${row.Period}  ${row.Edition} ${row.Volume} ${row.Author} ${row.Source}<br/>`\n            );\n\n            tmpID = row.ID;\n        }\n\n        html.push(`<img title=\"ID:${row.ID} Page:${row.Page} Tags:${row.Tags}\" class=\"thumbnail-img\" style=\"cursor:pointer;width:100px;height:150px;margin:0 5px 5px 0;\" src=\"${row.imageURL}\" />`);\n    }\n\n    offCanvasTitle.innerHTML = title;\n\n    panelBody.innerHTML = html.join('');\n\n    bindShowBigImage()\n\n}\n\nfunction bindShowBigImage(){\n\n    const imgList = panelBody.querySelectorAll('.thumbnail-img');\n\n    if(imgList){\n\n        for(const img of imgList){\n\n            img.onclick = (e) => {\n                localEventEmitter.emit('showBigImage', img.src);\n            }\n\n        }\n    }\n\n}\n\nfunction show(params){\n\n    if(!panel){\n        createUI();\n    }\n\n    setContent(params);\n\n    panel.show();\n\n    localEventEmitter.emit('shown', panel._element);\n}\n\nexport {\n    show,\n    addEventListener as on,\n}\n\n/* Events\n\n    { name: 'showBigImage', params: url-String }\n    { name: 'shown', params: panelDom-Object }\n    { name: 'hidden', params: panelDom-Object }\n\n*/\n"],"names":["Offcanvas","BootstrapWrap","localEventEmitter","Commons","panel","offCanvasTitle","panelBody","addEventListener","obj","types","fn","context","on","show","params","div","document","createElement","innerHTML","body","append","querySelector","offCanvasDom","firstChild","emit","bindPointersAndEvents","title","subTitle","rows","isSingleBook","html","tmpID","row","ID","push","name","Dynasty","Period","Edition","Volume","Author","Source","Page","Tags","imageURL","join","imgList","querySelectorAll","img","onclick","e","src","bindShowBigImage","setContent","_element"],"sourceRoot":""}